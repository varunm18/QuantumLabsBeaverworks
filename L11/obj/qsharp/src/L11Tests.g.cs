//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E01FullTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":14,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":15,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E01FullTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":15,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E01SparseTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"SparseSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":24}}]}},\"Offset\":{\"Item1\":30,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E01SparseTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":31,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E02FullTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":68,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":69,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E02FullTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":69,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E02ToffoliTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"ToffoliSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":88,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":89,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E02ToffoliTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":89,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":25}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E03TooManyQubitsTest\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":111,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L11\",\"Name\":\"E03TooManyQubitsTest\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs\",\"Position\":{\"Item1\":111,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
#line hidden
namespace MITRE.QSD.L11
{
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs", OperationFunctor.Body, 16, 32)]
    public partial class E01FullTest : Operation<QVoid, QVoid>, ICallable
    {
        public E01FullTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E01FullTest")]
            public void E01FullTest()
#line 16 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E01FullTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 16 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E01FullTest";
        String ICallable.FullName => "MITRE.QSD.L11.E01FullTest";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> E01_PrepareTwoTermState__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 17 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                var qubits = Allocate__.Apply(2L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 19 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Message__.Apply("Testing 2 qubits with secondTerm=3");
#line 21 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    E01_PrepareTwoTermState__.Apply((3L, new Microsoft.Quantum.Arithmetic.LittleEndian(qubits)));
#line 24 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[0L], qubits[1L]));
#line 25 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(qubits[0L]);
#line 27 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(qubits);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.E01_PrepareTwoTermState__ = this.__Factory__.Get<ICallable<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>>(typeof(E01_PrepareTwoTermState));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E01FullTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs", OperationFunctor.Body, 32, 70)]
    public partial class E01SparseTest : Operation<QVoid, QVoid>, ICallable
    {
        public E01SparseTest(IOperationFactory m) : base(m)
        {
        }

        public class SparseSimulator
        {
            public SparseSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "SparseSimulator")]
            [Xunit.Trait("Name", "E01SparseTest")]
            public void E01SparseTest()
#line 32 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.SparseSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E01SparseTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 32 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E01SparseTest";
        String ICallable.FullName => "MITRE.QSD.L11.E01SparseTest";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Random__DrawRandomInt
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid> E01_PrepareTwoTermState__
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 33 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            var MAX_TRIALS = 100L;
#line 34 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            foreach (var numQubits in new QRange(10L, 10L, 50L))
#line hidden
            {
#line 35 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                var secondTerm = Microsoft__Quantum__Random__DrawRandomInt.Apply((1L, (1L << (int)(numQubits - 1L))));
#line hidden
                {
#line 36 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    var qubits = Allocate__.Apply(numQubits);
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 37 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        var register = new Microsoft.Quantum.Arithmetic.LittleEndian(qubits);
#line 39 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        Message__.Apply(String.Format("Testing {0} qubits with secondTerm={1}", numQubits, secondTerm));
#line 41 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        var foundZero = false;
#line 42 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        var foundSecondTerm = false;
#line 43 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        var trial = 1L;
#line 44 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        while (true)
                        {
#line 45 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                            if ((trial > MAX_TRIALS))
                            {
#line 46 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                                throw new ExecutionFailException("Max trials reached");
                            }

#line 49 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                            E01_PrepareTwoTermState__.Apply((secondTerm, register));
#line 51 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                            var result = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(register);
#line 52 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                            Message__.Apply(String.Format("Trial {0}: measured {1}", trial, result));
#line 54 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                            if ((result == 0L))
                            {
#line 55 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                                foundZero = true;
                            }
                            else if ((result == secondTerm))
                            {
#line 57 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                                foundSecondTerm = true;
                            }
                            else
                            {
#line 59 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                                throw new ExecutionFailException("Incorrect measurement result");
                            }

#line 62 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                            trial = (trial + 1L);
                            if ((foundZero && foundSecondTerm))
                            {
                                break;
                            }
                            else
                            {
                            }
                        }
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(qubits);
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Random__DrawRandomInt = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Random.DrawRandomInt));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.E01_PrepareTwoTermState__ = this.__Factory__.Get<ICallable<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian), QVoid>>(typeof(E01_PrepareTwoTermState));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E01SparseTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs", OperationFunctor.Body, 70, 90)]
    public partial class E02FullTest : Operation<QVoid, QVoid>, ICallable
    {
        public E02FullTest(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E02FullTest")]
            public void E02FullTest()
#line 70 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E02FullTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 70 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E02FullTest";
        String ICallable.FullName => "MITRE.QSD.L11.E02FullTest";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, QVoid> E02_IncrementByOne__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 71 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                var qubits = Allocate__.Apply(2L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 74 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(qubits[0L]);
#line 75 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(qubits[1L]);
#line 76 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[0L], qubits[1L]));
#line 78 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Message__.Apply("Testing with input state 1/√2(|1>+|2>)");
#line 80 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    E02_IncrementByOne__.Apply(new Microsoft.Quantum.Arithmetic.LittleEndian(qubits));
#line 83 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(qubits[0L]);
#line 84 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(qubits[1L]);
#line 85 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(qubits);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.E02_IncrementByOne__ = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, QVoid>>(typeof(E02_IncrementByOne));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E02FullTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs", OperationFunctor.Body, 90, 112)]
    public partial class E02ToffoliTest : Operation<QVoid, QVoid>, ICallable
    {
        public E02ToffoliTest(IOperationFactory m) : base(m)
        {
        }

        public class ToffoliSimulator
        {
            public ToffoliSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "ToffoliSimulator")]
            [Xunit.Trait("Name", "E02ToffoliTest")]
            public void E02ToffoliTest()
#line 90 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.ToffoliSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E02ToffoliTest, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 90 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E02ToffoliTest";
        String ICallable.FullName => "MITRE.QSD.L11.E02ToffoliTest";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Random__DrawRandomInt
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__ApplyXorInPlace
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, QVoid> E02_IncrementByOne__
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactI
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 91 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            foreach (var numQubits in new QRange(10L, 10L, 50L))
#line hidden
            {
#line 92 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                var valueToIncrement = Microsoft__Quantum__Random__DrawRandomInt.Apply((1L, (1L << (int)(numQubits - 1L))));
#line hidden
                {
#line 93 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                    var qubits = Allocate__.Apply(numQubits);
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 94 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        var register = new Microsoft.Quantum.Arithmetic.LittleEndian(qubits);
#line 96 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        Microsoft__Quantum__Arithmetic__ApplyXorInPlace.Apply((valueToIncrement, register));
#line 98 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        Message__.Apply(String.Format("Testing with input state |{0}>", valueToIncrement));
#line 100 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        E02_IncrementByOne__.Apply(register);
#line 102 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        var result = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(register);
#line 103 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
                        Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((result, (valueToIncrement + 1L), "Incorrect measurement result"));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(qubits);
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Random__DrawRandomInt = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Random.DrawRandomInt));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Microsoft__Quantum__Arithmetic__ApplyXorInPlace = this.__Factory__.Get<IUnitary<(Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.ApplyXorInPlace));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
            this.E02_IncrementByOne__ = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, QVoid>>(typeof(E02_IncrementByOne));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Diagnostics__EqualityFactI = this.__Factory__.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactI));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E02ToffoliTest, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs", OperationFunctor.Body, 112, -1)]
    public partial class E03TooManyQubitsTest : Operation<QVoid, QVoid>, ICallable
    {
        public E03TooManyQubitsTest(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "E03TooManyQubitsTest";
        String ICallable.FullName => "MITRE.QSD.L11.E03TooManyQubitsTest";
        protected IAdjointable<(Int64,String)> Microsoft__Quantum__Diagnostics__AllowAtMostNQubits
        {
            get;
            set;
        }

        protected ICallable<QVoid, QVoid> E03_ImpossibleToSimulate__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 116 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            Microsoft__Quantum__Diagnostics__AllowAtMostNQubits.Apply((29L, "Too many qubits allocated"));
#line 118 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            E03_ImpossibleToSimulate__.Apply(QVoid.Instance);
#line 112 "/home/ubuntu/varun/do-not-modify/L11/L11Tests.qs"
            Microsoft__Quantum__Diagnostics__AllowAtMostNQubits.Adjoint.Apply((29L, "Too many qubits allocated"));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Diagnostics__AllowAtMostNQubits = this.__Factory__.Get<IAdjointable<(Int64,String)>>(typeof(global::Microsoft.Quantum.Diagnostics.AllowAtMostNQubits));
            this.E03_ImpossibleToSimulate__ = this.__Factory__.Get<ICallable<QVoid, QVoid>>(typeof(E03_ImpossibleToSimulate));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E03TooManyQubitsTest, QVoid, QVoid>(QVoid.Instance);
        }
    }
}
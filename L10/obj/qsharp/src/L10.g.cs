//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E01_BitFlipEncode\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":32,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"original\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"spares\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with an original qubit in an\",\" unknown state a|0> + b|1>. You are also provided with two blank\",\" qubits, both of which are in the |0> state. Your goal is to construct\",\" a \\\"logical qubit\\\" from these three qubits that acts like a single\",\" qubit, but can protect against bit-flip errors on any one of the three\",\" actual qubits.\",\"\",\" To construct the logical qubit, put the three qubits into the\",\" entangled state a|000> + b|111>.\",\"\",\" # Input\",\" ## original\",\" A qubit that you want to protect from bit flips. It will be in the\",\" state a|0> + b|1>.\",\"\",\" ## spares\",\" A register of two spare qubits that you can use to add error\",\" correction to the original qubit. Both are in the |0> state.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E01_BitFlipEncode\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":32,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E01_BitFlipEncode\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":32,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":4,\"Column\":17},\"Item2\":{\"Line\":4,\"Column\":20}},\"Documentation\":[\"automatically generated QsAdjoint specialization for MITRE.QSD.L10.E01_BitFlipEncode\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E02_BitFlipSyndrome\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":68,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":32},\"Item2\":{\"Line\":1,\"Column\":40}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with a logical qubit, represented\",\" by an error-protected register that was encoded with your Exercise 1\",\" implementation. Your goal is to perform a syndrome measurement on the\",\" register. This should consist of two parity checks (a parity check is\",\" an operation to see whether or not two qubits have the same state).\",\" The first parity check should be between qubits 0 and 1, and the\",\" second check should be between qubits 0 and 2.\",\"\",\" # Input\",\" ## register\",\" A three-qubit register representing a single error-protected logical\",\" qubit. Its state is unknown, and one of the qubits may have suffered\",\" a bit flip error.\",\"\",\" # Output\",\" An array of two measurement results. The first result should be the\",\" measurement of the parity check on qubits 0 and 1, and the second\",\" result should be the measurement of the parity check on qubits 0 and\",\" 2. If both qubits in a parity check have the same state, the resulting\",\" bit should be Zero. If the two qubits have different states (meaning\",\" one of the two qubits was flipped), the result should be One.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E02_BitFlipSyndrome\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":68,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":30}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E03_BitFlipCorrection\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Controlled\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":109,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"syndromeMeasurement\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with a logical qubit encoded with\",\" your Exercise 1 implementation and a syndrome measurement array\",\" produced by your Exercise 2 implementation. Your goal is to interpret\",\" the syndrome measurement to find which qubit in the error-corrected\",\" register suffered a bit-flip error (if any), and to correct it by\",\" flipping it back to the proper state.\",\"\",\" # Input\",\" ## register\",\" A three-qubit register representing a single error-protected logical\",\" qubit. Its state is unknown, and one of the qubits may have suffered\",\" a bit flip error.\",\"\",\" ## syndromeMeasurement\",\" An array of two measurement results that represent parity checks. The\",\" first one represents a parity check between qubit 0 and qubit 1; if\",\" both qubits have the same parity, the result will be 0, and if they\",\" have opposite parity, the result will be One. The second result\",\" corresponds to a parity check between qubit 0 and qubit 2.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E03_BitFlipCorrection\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":109,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E04_SteaneEncode\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":151,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"original\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"spares\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Qubit\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with an original qubit in an\",\" unknown state a|0> + b|1>. You are also provided with 6 blank qubits,\",\" all of which are in the |0> state. Your goal is to construct a\",\" \\\"logical qubit\\\" from these 7 qubits that acts like a single qubit, but\",\" can protect against a single bit-flip error and a single phase-flip\",\" error on any of the actual qubits. The bit-flip and phase-flip may be\",\" on different qubits.\",\"\",\" # Input\",\" ## original\",\" A qubit that you want to protect from bit flips. It will be in the\",\" state a|0> + b|1>.\",\"\",\" ## spares\",\" A register of 6 spare qubits that you can use to add error correction\",\" to the original qubit. All of them are in the |0> state.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E04_SteaneEncode\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":151,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":27}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E04_SteaneEncode\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":151,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":4,\"Column\":17},\"Item2\":{\"Line\":4,\"Column\":20}},\"Documentation\":[\"automatically generated QsAdjoint specialization for MITRE.QSD.L10.E04_SteaneEncode\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E05_SteaneBitSyndrome\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":190,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":34},\"Item2\":{\"Line\":1,\"Column\":42}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with a logical qubit, represented\",\" by an error-protected register that was encoded with your Exercise 4\",\" implementation. Your goal is to perform a bit-flip syndrome\",\" measurement on the register, to determine if any of the bits have been\",\" flipped.\",\"\",\" # Input\",\" ## register\",\" A 7-qubit register representing a single error-protected logical\",\" qubit. Its state  is unknown, and it may have suffered a bit-flip\",\" and/or a phase-flip error.\",\"\",\" # Output\",\" An array of the 3 syndrome measurement results that the Steane code\",\" produces.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E05_SteaneBitSyndrome\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":190,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E06_SteanePhaseSyndrome\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":232,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":36},\"Item2\":{\"Line\":1,\"Column\":44}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with a logical qubit, represented\",\" by an error-protected register that was encoded with your Exercise 4\",\" implementation. Your goal is to perform a phase-flip syndrome\",\" measurement on the register, to determine if any of the qubits have\",\" suffered a phase-flip error.\",\"\",\" # Input\",\" ## register\",\" A 7-qubit register representing a single error-protected logical\",\" qubit. Its state is unknown, and it may have suffered a bit-flip\",\" and/or a phase-flip error.\",\"\",\" # Output\",\" An array of the 3 syndrome measurement results that the Steane code\",\" produces.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E06_SteanePhaseSyndrome\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":232,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":34}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E07_SyndromeToIndex\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":298,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"syndrome\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":39}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Result\"}]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are provided with the 3-result array of syndrome\",\" measurements provided by the bit-flip or phase-flip measurement\",\" operations. Your goal is to determine the index of the broken qubit\",\" (if any) based on these measurements.\",\"\",\" As a reminder, for Steane's code, the following table shows the\",\" relationship between the syndrome measurements and the index of the\",\" broken qubit:\",\" -----------------------\",\" 000 = No error\",\" 001 = Error or qubit 0\",\" 010 = Error on qubit 1\",\" 011 = Error on qubit 2\",\" 100 = Error on qubit 3\",\" 101 = Error on qubit 4\",\" 110 = Error on qubit 5\",\" 111 = Error on qubit 6\",\" -----------------------\",\"\",\" # Input\",\" ## syndrome\",\" An array of the 3 syndrome measurement results from the bit-flip or\",\" phase-flip measurement operations. These will come from your\",\" implementations of Exercise 5 and Exercise 6.\",\"\",\" # Output\",\" An Int identifying the index of the broken qubit, based on the\",\" syndrome measurements. If none of the qubits are broken, you should\",\" return -1.\",\"\",\" # Remarks\",\" This is a \\\"function\\\" instead of an \\\"operation\\\" because it's a purely\",\" classical method. It doesn't have any quantum parts to it, just lots\",\" of regular old classical math and logic.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E07_SyndromeToIndex\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":298,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":29}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E08_SteaneCorrection\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":324,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":33},\"Item2\":{\"Line\":1,\"Column\":41}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given a logical qubit represented by an\",\" error-protected register of 7 physical qubits. This register was\",\" produced by your implementation of Exercise 4. It is in an unknown\",\" state, but one of its qubits may or may not have suffered a bit-flip\",\" error, and another qubit may or may not have suffered a phase-flip\",\" error. Your goal is to use your implementations of Exercises 2, 3, and\",\" 4 to detect and correct the bit-flip and/or phase-flip errors in the\",\" register.\",\"\",\" # Input\",\" ## register\",\" A 7-qubit register representing a single error-protected logical\",\" qubit. Its state is unknown, and it may have suffered a bit-flip\",\" and/or a phase-flip error.\",\"\",\" # Remarks\",\" This test may take a lot longer to run than you're used to, because it\",\" tests every possible combination of bit and phase flips on a whole\",\" bunch of different original qubit states. Don't worry if it doesn't\",\" immediately finish!\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E08_SteaneCorrection\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10.qs\",\"Position\":{\"Item1\":324,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":31}},\"Documentation\":[]}")]
#line hidden
namespace MITRE.QSD.L10
{
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Body, 33, 69)]
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Adjoint, 33, 69)]
    public partial class E01_BitFlipEncode : Adjointable<(Qubit,IQArray<Qubit>)>, ICallable
    {
        public E01_BitFlipEncode(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,IQArray<Qubit>)>, IApplyData
        {
            public In((Qubit,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "E01_BitFlipEncode";
        String ICallable.FullName => "MITRE.QSD.L10.E01_BitFlipEncode";
        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        public override Func<(Qubit,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (original,spares) = __in__;
#line 42 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((original, spares[0L]));
#line 43 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((original, spares[1L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (original,spares) = __in__;
#line 33 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((original, spares[1L]));
#line 33 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((original, spares[0L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __DataIn__((Qubit,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit original, IQArray<Qubit> spares)
        {
            return __m__.Run<E01_BitFlipEncode, (Qubit,IQArray<Qubit>), QVoid>((original, spares));
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Body, 69, 110)]
    public partial class E02_BitFlipSyndrome : Operation<IQArray<Qubit>, IQArray<Result>>, ICallable
    {
        public E02_BitFlipSyndrome(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "E02_BitFlipSyndrome";
        String ICallable.FullName => "MITRE.QSD.L10.E02_BitFlipSyndrome";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, IQArray<Result>> __Body__ => (__in__) =>
        {
            var register = __in__;
#line hidden
            {
#line 75 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                var qubit = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 77 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
#line hidden
                    var __arg2__ = Result.Zero;
#line 77 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    var resArray = new QArray<Result>(QArray.Filled(() => __arg2__, 2L));
#line 79 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    foreach (var i in new QRange(0L, 1L))
#line hidden
                    {
#line 80 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                        Microsoft__Quantum__Intrinsic__CNOT.Apply((register[0L], qubit));
#line 81 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                        Microsoft__Quantum__Intrinsic__CNOT.Apply((register[(i + 1L)], qubit));
#line 82 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                        resArray.Modify(i, Microsoft__Quantum__Intrinsic__M.Apply(qubit));
#line 83 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                        Reset__.Apply(qubit);
                    }

#line 86 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    return resArray;
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubit);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(IQArray<Result> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Result>> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<E02_BitFlipSyndrome, IQArray<Qubit>, IQArray<Result>>(register);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Body, 110, 152)]
    public partial class E03_BitFlipCorrection : Operation<(IQArray<Qubit>,IQArray<Result>), QVoid>, ICallable
    {
        public E03_BitFlipCorrection(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Result>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Result>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1)?.Qubits;
                }
            }
        }

        String ICallable.Name => "E03_BitFlipCorrection";
        String ICallable.FullName => "MITRE.QSD.L10.E03_BitFlipCorrection";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Result>), QVoid> __Body__ => (__in__) =>
        {
            var (register,syndromeMeasurement) = __in__;
#line 118 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            var firstM = syndromeMeasurement[0L];
#line 119 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            var secondM = syndromeMeasurement[1L];
#line 121 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            if ((firstM == Result.One))
            {
#line 122 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                if ((secondM == Result.One))
                {
#line 123 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(register[0L]);
                }
                else
                {
#line 126 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(register[1L]);
                }
            }
            else if ((secondM == Result.One))
            {
#line 130 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                Microsoft__Quantum__Intrinsic__X.Apply(register[2L]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Result>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register, IQArray<Result> syndromeMeasurement)
        {
            return __m__.Run<E03_BitFlipCorrection, (IQArray<Qubit>,IQArray<Result>), QVoid>((register, syndromeMeasurement));
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Body, 152, 191)]
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Adjoint, 152, 191)]
    public partial class E04_SteaneEncode : Adjointable<(Qubit,IQArray<Qubit>)>, ICallable
    {
        public E04_SteaneEncode(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Qubit,IQArray<Qubit>)>, IApplyData
        {
            public In((Qubit,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "E04_SteaneEncode";
        String ICallable.FullName => "MITRE.QSD.L10.E04_SteaneEncode";
        protected IAdjointable Microsoft__Quantum__Canon__ApplyToEachA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        public override Func<(Qubit,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (original,spares) = __in__;
#line 156 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Apply((Microsoft__Quantum__Intrinsic__H, new QArray<Qubit>(spares[3L], spares[4L], spares[5L])));
#line 158 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((original, spares[0L]));
#line 159 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((original, spares[1L]));
#line 161 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[5L], original));
#line 162 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[5L], spares[0L]));
#line 163 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[5L], spares[2L]));
#line 165 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[4L], original));
#line 166 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[4L], spares[1L]));
#line 167 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[4L], spares[2L]));
#line 169 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[3L], spares[0L]));
#line 170 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[3L], spares[1L]));
#line 171 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Apply((spares[3L], spares[2L]));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(Qubit,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (original,spares) = __in__;
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[3L], spares[2L]));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[3L], spares[1L]));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[3L], spares[0L]));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[4L], spares[2L]));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[4L], spares[1L]));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[4L], original));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[5L], spares[2L]));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[5L], spares[0L]));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((spares[5L], original));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((original, spares[1L]));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Intrinsic__CNOT.Adjoint.Apply((original, spares[0L]));
#line 152 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            Microsoft__Quantum__Canon__ApplyToEachA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__H, new QArray<Qubit>(spares[3L], spares[4L], spares[5L])));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEachA = this.__Factory__.Get<IAdjointable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
        }

        public override IApplyData __DataIn__((Qubit,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Qubit original, IQArray<Qubit> spares)
        {
            return __m__.Run<E04_SteaneEncode, (Qubit,IQArray<Qubit>), QVoid>((original, spares));
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Body, 191, 233)]
    public partial class E05_SteaneBitSyndrome : Operation<IQArray<Qubit>, IQArray<Result>>, ICallable
    {
        public E05_SteaneBitSyndrome(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "E05_SteaneBitSyndrome";
        String ICallable.FullName => "MITRE.QSD.L10.E05_SteaneBitSyndrome";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Canon__SwapReverseRegister
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, IQArray<Result>> __Body__ => (__in__) =>
        {
            var register = __in__;
#line hidden
            {
#line 192 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                var qubits = Allocate__.Apply(3L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 194 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[0L], qubits[0L]));
#line 195 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[2L], qubits[0L]));
#line 196 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[4L], qubits[0L]));
#line 197 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[6L], qubits[0L]));
#line 199 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[1L], qubits[1L]));
#line 200 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[2L], qubits[1L]));
#line 201 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[5L], qubits[1L]));
#line 202 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[6L], qubits[1L]));
#line 204 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[3L], qubits[2L]));
#line 205 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[4L], qubits[2L]));
#line 206 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[5L], qubits[2L]));
#line 207 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((register[6L], qubits[2L]));
#line 209 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Canon__SwapReverseRegister.Apply(qubits);
#line 211 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    var res = (IQArray<Result>)Microsoft__Quantum__Measurement__MultiM.Apply(qubits);
#line 213 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    return res;
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Canon__SwapReverseRegister = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Canon.SwapReverseRegister));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(IQArray<Result> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Result>> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<E05_SteaneBitSyndrome, IQArray<Qubit>, IQArray<Result>>(register);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Body, 233, 299)]
    public partial class E06_SteanePhaseSyndrome : Operation<IQArray<Qubit>, IQArray<Result>>, ICallable
    {
        public E06_SteanePhaseSyndrome(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "E06_SteanePhaseSyndrome";
        String ICallable.FullName => "MITRE.QSD.L10.E06_SteanePhaseSyndrome";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Canon__SwapReverseRegister
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> Microsoft__Quantum__Measurement__MultiM
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, IQArray<Result>> __Body__ => (__in__) =>
        {
            var register = __in__;
#line hidden
            {
#line 235 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                var qubits = Allocate__.Apply(3L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 237 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qubits));
#line 239 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[0L], register[0L]));
#line 240 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[0L], register[2L]));
#line 241 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[0L], register[4L]));
#line 242 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[0L], register[6L]));
#line 244 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[1L], register[1L]));
#line 245 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[1L], register[2L]));
#line 246 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[1L], register[5L]));
#line 247 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[1L], register[6L]));
#line 249 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[2L], register[3L]));
#line 250 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[2L], register[4L]));
#line 251 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[2L], register[5L]));
#line 252 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[2L], register[6L]));
#line 254 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, qubits));
#line 256 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    Microsoft__Quantum__Canon__SwapReverseRegister.Apply(qubits);
#line 258 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    var res = (IQArray<Result>)Microsoft__Quantum__Measurement__MultiM.Apply(qubits);
#line 260 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                    return res;
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Canon__SwapReverseRegister = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Canon.SwapReverseRegister));
            this.Microsoft__Quantum__Measurement__MultiM = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(global::Microsoft.Quantum.Measurement.MultiM));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(IQArray<Result> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Result>> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<E06_SteanePhaseSyndrome, IQArray<Qubit>, IQArray<Result>>(register);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Body, 299, 325)]
    public partial class E07_SyndromeToIndex : Function<IQArray<Result>, Int64>, ICallable
    {
        public E07_SyndromeToIndex(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "E07_SyndromeToIndex";
        String ICallable.FullName => "MITRE.QSD.L10.E07_SyndromeToIndex";
        protected ICallable<IQArray<Result>, Int64> Microsoft__Quantum__Convert__ResultArrayAsInt
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Arrays__Reversed
        {
            get;
            set;
        }

        public override Func<IQArray<Result>, Int64> __Body__ => (__in__) =>
        {
            var syndrome = __in__;
#line 300 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            return (Microsoft__Quantum__Convert__ResultArrayAsInt.Apply(Microsoft__Quantum__Arrays__Reversed.Apply<IQArray<Result>>(syndrome)) - 1L);
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Convert__ResultArrayAsInt = this.__Factory__.Get<ICallable<IQArray<Result>, Int64>>(typeof(global::Microsoft.Quantum.Convert.ResultArrayAsInt));
            this.Microsoft__Quantum__Arrays__Reversed = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Arrays.Reversed<>));
        }

        public override IApplyData __DataIn__(IQArray<Result> data) => data;
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, IQArray<Result> syndrome)
        {
            return __m__.Run<E07_SyndromeToIndex, IQArray<Result>, Int64>(syndrome);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10.qs", OperationFunctor.Body, 325, -1)]
    public partial class E08_SteaneCorrection : Operation<IQArray<Qubit>, QVoid>, ICallable
    {
        public E08_SteaneCorrection(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "E08_SteaneCorrection";
        String ICallable.FullName => "MITRE.QSD.L10.E08_SteaneCorrection";
        protected ICallable<IQArray<Qubit>, IQArray<Result>> E05_SteaneBitSyndrome__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, Int64> E07_SyndromeToIndex__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> E06_SteanePhaseSyndrome__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        public override Func<IQArray<Qubit>, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 327 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            var syndrome = new QArray<Result>(E05_SteaneBitSyndrome__.Apply(register));
#line 328 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            var index = E07_SyndromeToIndex__.Apply(syndrome?.Copy());
#line 329 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            if ((index != -(1L)))
            {
#line 330 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                Microsoft__Quantum__Intrinsic__X.Apply(register[index]);
            }

#line 333 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            syndrome = new QArray<Result>(E06_SteanePhaseSyndrome__.Apply(register));
#line 334 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            index = E07_SyndromeToIndex__.Apply(syndrome?.Copy());
#line 335 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
            if ((index != -(1L)))
            {
#line 336 "/home/ubuntu/varun/do-not-modify/L10/L10.qs"
                Microsoft__Quantum__Intrinsic__Z.Apply(register[index]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.E05_SteaneBitSyndrome__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(E05_SteaneBitSyndrome));
            this.E07_SyndromeToIndex__ = this.__Factory__.Get<ICallable<IQArray<Result>, Int64>>(typeof(E07_SyndromeToIndex));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.E06_SteanePhaseSyndrome__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(E06_SteanePhaseSyndrome));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
        }

        public override IApplyData __DataIn__(IQArray<Qubit> data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register)
        {
            return __m__.Run<E08_SteaneCorrection, IQArray<Qubit>, QVoid>(register);
        }
    }
}
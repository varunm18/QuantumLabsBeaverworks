//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"GenerateRandomRotation\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":14,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"GenerateRandomRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":14,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":33}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"ApplyRotation\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":22,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"rotation\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":26},\"Item2\":{\"Line\":1,\"Column\":34}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":47},\"Item2\":{\"Line\":1,\"Column\":53}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Double\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"ApplyRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":22,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":24}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"ApplyRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":22,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsAdjoint specialization for MITRE.QSD.L10.ApplyRotation\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"ApplyRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":22,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlled specialization for MITRE.QSD.L10.ApplyRotation\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"ApplyRotation\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":22,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for MITRE.QSD.L10.ApplyRotation\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E01Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":29,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":30,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E01Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":30,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E02Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":47,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Controlled\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":48,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E02Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":48,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E03Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":105,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Controlled\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":106,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E03Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":106,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E04Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":131,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":132,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E04Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":132,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E05Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":154,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":155,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E05Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":155,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E06Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":199,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":200,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E06Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":200,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E07Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":244,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":245,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E07Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":245,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E08Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":261,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":262,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L10\",\"Name\":\"E08Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs\",\"Position\":{\"Item1\":262,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
#line hidden
namespace MITRE.QSD.L10
{
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 15, 23)]
    public partial class GenerateRandomRotation : Operation<QVoid, IQArray<Double>>, ICallable
    {
        public GenerateRandomRotation(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "GenerateRandomRotation";
        String ICallable.FullName => "MITRE.QSD.L10.GenerateRandomRotation";
        protected ICallable<(Double,Double), Double> Microsoft__Quantum__Random__DrawRandomDouble
        {
            get;
            set;
        }

        protected ICallable<QVoid, Double> Microsoft__Quantum__Math__PI
        {
            get;
            set;
        }

        public override Func<QVoid, IQArray<Double>> __Body__ => (__in__) =>
        {
#line 16 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            return new QArray<Double>(Microsoft__Quantum__Random__DrawRandomDouble.Apply((0D, Microsoft__Quantum__Math__PI.Apply(QVoid.Instance))), Microsoft__Quantum__Random__DrawRandomDouble.Apply((0D, (2D * Microsoft__Quantum__Math__PI.Apply(QVoid.Instance)))));
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Random__DrawRandomDouble = this.__Factory__.Get<ICallable<(Double,Double), Double>>(typeof(global::Microsoft.Quantum.Random.DrawRandomDouble));
            this.Microsoft__Quantum__Math__PI = this.__Factory__.Get<ICallable<QVoid, Double>>(typeof(global::Microsoft.Quantum.Math.PI));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(IQArray<Double> data) => data;
        public static System.Threading.Tasks.Task<IQArray<Double>> Run(IOperationFactory __m__)
        {
            return __m__.Run<GenerateRandomRotation, QVoid, IQArray<Double>>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 23, 31)]
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Adjoint, 23, 31)]
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Controlled, 23, 31)]
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.ControlledAdjoint, 23, 31)]
    public partial class ApplyRotation : Unitary<(IQArray<Double>,Qubit)>, ICallable
    {
        public ApplyRotation(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Double>,Qubit)>, IApplyData
        {
            public In((IQArray<Double>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    yield return Data.Item2;
                }
            }
        }

        String ICallable.Name => "ApplyRotation";
        String ICallable.FullName => "MITRE.QSD.L10.ApplyRotation";
        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Rx
        {
            get;
            set;
        }

        protected IUnitary<(Double,Qubit)> Microsoft__Quantum__Intrinsic__Rz
        {
            get;
            set;
        }

        public override Func<(IQArray<Double>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (rotation,target) = __in__;
#line 25 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            Microsoft__Quantum__Intrinsic__Rx.Apply((rotation[0L], target));
#line 26 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            Microsoft__Quantum__Intrinsic__Rz.Apply((rotation[1L], target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Double>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (rotation,target) = __in__;
#line 23 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            Microsoft__Quantum__Intrinsic__Rz.Adjoint.Apply((rotation[1L], target));
#line 23 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            Microsoft__Quantum__Intrinsic__Rx.Adjoint.Apply((rotation[0L], target));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Double>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(rotation,target)) = __in__;
#line 23 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            Microsoft__Quantum__Intrinsic__Rx.Controlled.Apply((__controlQubits__, (rotation[0L], target)));
#line 23 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            Microsoft__Quantum__Intrinsic__Rz.Controlled.Apply((__controlQubits__, (rotation[1L], target)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Double>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(rotation,target)) = __in__;
#line 23 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            Microsoft__Quantum__Intrinsic__Rz.Adjoint.Controlled.Apply((__controlQubits__, (rotation[1L], target)));
#line 23 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            Microsoft__Quantum__Intrinsic__Rx.Adjoint.Controlled.Apply((__controlQubits__, (rotation[0L], target)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__Rx = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Rx));
            this.Microsoft__Quantum__Intrinsic__Rz = this.__Factory__.Get<IUnitary<(Double,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.Rz));
        }

        public override IApplyData __DataIn__((IQArray<Double>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Double> rotation, Qubit target)
        {
            return __m__.Run<ApplyRotation, (IQArray<Double>,Qubit), QVoid>((rotation, target));
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 31, 49)]
    public partial class E01Test : Operation<QVoid, QVoid>, ICallable
    {
        public E01Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E01Test")]
            public void E01Test()
#line 31 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E01Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 31 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E01Test";
        String ICallable.FullName => "MITRE.QSD.L10.E01Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,IQArray<Qubit>)> E01_BitFlipEncode__
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 32 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            foreach (var i in new QRange(1L, 25L))
#line hidden
            {
#line hidden
                {
#line 33 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    var (original,spares) = (Allocate__.Apply(), Allocate__.Apply(2L));
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 34 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 35 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        ApplyRotation__.Apply((rotation, original));
#line 37 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        E01_BitFlipEncode__.Apply((original, spares));
#line 39 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        Microsoft__Quantum__Intrinsic__CNOT.Apply((original, spares[0L]));
#line 40 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        Microsoft__Quantum__Intrinsic__CNOT.Apply((original, spares[1L]));
#line 41 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        ApplyRotation__.Adjoint.Apply((rotation, original));
#line 43 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(QArray<Qubit>.Add(new QArray<Qubit>(original), spares));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(original);
#line hidden
                            Release__.Apply(spares);
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.E01_BitFlipEncode__ = this.__Factory__.Get<IAdjointable<(Qubit,IQArray<Qubit>)>>(typeof(E01_BitFlipEncode));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E01Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 49, 107)]
    public partial class E02Test : Operation<QVoid, QVoid>, ICallable
    {
        public E02Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E02Test")]
            public void E02Test()
#line 49 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E02Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 49 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E02Test";
        String ICallable.FullName => "MITRE.QSD.L10.E02Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,IQArray<Qubit>)> E01_BitFlipEncode__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> E02_BitFlipSyndrome__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 50 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            foreach (var i in new QRange(1L, 10L))
#line hidden
            {
#line 51 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                foreach (var brokenQubitIndex in new QRange(-(1L), 3L))
#line hidden
                {
#line hidden
                    {
#line 52 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        var register = Allocate__.Apply(3L);
#line hidden
                        bool __arg1__ = true;
                        try
                        {
#line 53 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 54 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            ApplyRotation__.Apply((rotation, register[0L]));
#line 55 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            E01_BitFlipEncode__.Apply((register[0L], register.Slice(new QRange(1L, 2L))));
#line 58 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((brokenQubitIndex == -(1L)))
                            {
#line 59 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                var syndrome = new QArray<Result>(E02_BitFlipSyndrome__.Apply(register));
#line 60 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                if (((syndrome[0L] != Result.Zero) || (syndrome[1L] != Result.Zero)))
                                {
#line 61 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                    throw new ExecutionFailException((("Incorrect syndrome measurement. " + "It should have been [Zero, Zero] but it was") + String.Format("[{0}, {1}", syndrome[0L], syndrome[1L])));
                                }
                            }
                            else if ((brokenQubitIndex == 0L))
                            {
#line 69 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Intrinsic__X.Apply(register[0L]);
#line 70 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                var syndrome = new QArray<Result>(E02_BitFlipSyndrome__.Apply(register));
#line 71 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                if (((syndrome[0L] != Result.One) || (syndrome[1L] != Result.One)))
                                {
#line 72 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                    throw new ExecutionFailException((("Incorrect syndrome measurement. " + "It should have been [One, One] but it was") + String.Format("[{0}, {1}", syndrome[0L], syndrome[1L])));
                                }
                            }
                            else if ((brokenQubitIndex == 1L))
                            {
#line 80 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Intrinsic__X.Apply(register[1L]);
#line 81 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                var syndrome = new QArray<Result>(E02_BitFlipSyndrome__.Apply(register));
#line 82 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                if (((syndrome[0L] != Result.One) || (syndrome[1L] != Result.Zero)))
                                {
#line 83 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                    throw new ExecutionFailException((("Incorrect syndrome measurement. " + "It should have been [One, Zero] but it was") + String.Format("[{0}, {1}", syndrome[0L], syndrome[1L])));
                                }
                            }
                            else if ((brokenQubitIndex == 1L))
                            {
#line 91 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Intrinsic__X.Apply(register[2L]);
#line 92 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                var syndrome = new QArray<Result>(E02_BitFlipSyndrome__.Apply(register));
#line 93 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                if (((syndrome[0L] != Result.Zero) || (syndrome[1L] != Result.One)))
                                {
#line 94 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                    throw new ExecutionFailException((("Incorrect syndrome measurement. " + "It should have been [Zero, One] but it was") + String.Format("[{0}, {1}", syndrome[0L], syndrome[1L])));
                                }
                            }

#line 100 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            ResetAll__.Apply(register);
                        }
#line hidden
                        catch
                        {
                            __arg1__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg1__)
                            {
#line hidden
                                Release__.Apply(register);
                            }
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.E01_BitFlipEncode__ = this.__Factory__.Get<IAdjointable<(Qubit,IQArray<Qubit>)>>(typeof(E01_BitFlipEncode));
            this.E02_BitFlipSyndrome__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(E02_BitFlipSyndrome));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E02Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 107, 133)]
    public partial class E03Test : Operation<QVoid, QVoid>, ICallable
    {
        public E03Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E03Test")]
            public void E03Test()
#line 107 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E03Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 107 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E03Test";
        String ICallable.FullName => "MITRE.QSD.L10.E03Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,IQArray<Qubit>)> E01_BitFlipEncode__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> E02_BitFlipSyndrome__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Qubit>,IQArray<Result>), QVoid> E03_BitFlipCorrection__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 108 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            foreach (var i in new QRange(1L, 10L))
#line hidden
            {
#line 109 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                foreach (var brokenQubitIndex in new QRange(-(1L), 2L))
#line hidden
                {
#line hidden
                    {
#line 110 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        var register = Allocate__.Apply(3L);
#line hidden
                        bool __arg1__ = true;
                        try
                        {
#line 111 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 112 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            ApplyRotation__.Apply((rotation, register[0L]));
#line 113 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            E01_BitFlipEncode__.Apply((register[0L], register.Slice(new QRange(1L, 2L))));
#line 115 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((brokenQubitIndex >= 0L))
                            {
#line 116 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Intrinsic__X.Apply(register[brokenQubitIndex]);
                            }

#line 119 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            var syndrome = (IQArray<Result>)E02_BitFlipSyndrome__.Apply(register);
#line 121 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            E03_BitFlipCorrection__.Apply((register, syndrome));
#line 123 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            E01_BitFlipEncode__.Adjoint.Apply((register[0L], register.Slice(new QRange(1L, 2L))));
#line 124 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            ApplyRotation__.Adjoint.Apply((rotation, register[0L]));
#line 126 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(register);
                        }
#line hidden
                        catch
                        {
                            __arg1__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg1__)
                            {
#line hidden
                                Release__.Apply(register);
                            }
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.E01_BitFlipEncode__ = this.__Factory__.Get<IAdjointable<(Qubit,IQArray<Qubit>)>>(typeof(E01_BitFlipEncode));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.E02_BitFlipSyndrome__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(E02_BitFlipSyndrome));
            this.E03_BitFlipCorrection__ = this.__Factory__.Get<ICallable<(IQArray<Qubit>,IQArray<Result>), QVoid>>(typeof(E03_BitFlipCorrection));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E03Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 133, 156)]
    public partial class E04Test : Operation<QVoid, QVoid>, ICallable
    {
        public E04Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E04Test")]
            public void E04Test()
#line 133 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E04Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 133 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E04Test";
        String ICallable.FullName => "MITRE.QSD.L10.E04Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,IQArray<Qubit>)> E04_SteaneEncode__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 134 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                var (original,spares) = (Allocate__.Apply(), Allocate__.Apply(6L));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 136 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    foreach (var i in new QRange(1L, 10L))
#line hidden
                    {
#line 137 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 138 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        ApplyRotation__.Apply((rotation, original));
#line 140 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        E04_SteaneEncode__.Apply((original, spares));
#line 142 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__CNOT.Partial(new Func<Qubit, (Qubit,Qubit)>((__arg2__) => (spares[3L], __arg2__))), spares.Slice(new QRange(0L, 2L))));
#line 143 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__CNOT.Partial(new Func<Qubit, (Qubit,Qubit)>((__arg3__) => (spares[4L], __arg3__))), QArray<Qubit>.Add(new QArray<Qubit>(original), spares.Slice(new QRange(1L, 2L)))));
#line 144 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__CNOT.Partial(new Func<Qubit, (Qubit,Qubit)>((__arg4__) => (spares[5L], __arg4__))), new QArray<Qubit>(original, spares[0L], spares[2L])));
#line 145 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__CNOT.Partial(new Func<Qubit, (Qubit,Qubit)>((__arg5__) => (original, __arg5__))), spares.Slice(new QRange(0L, 1L))));
#line 146 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, spares.Slice(new QRange(3L, 5L))));
#line 148 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        ApplyRotation__.Adjoint.Apply((rotation, original));
#line 150 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(QArray<Qubit>.Add(new QArray<Qubit>(original), spares));
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(original);
#line hidden
                        Release__.Apply(spares);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.E04_SteaneEncode__ = this.__Factory__.Get<IAdjointable<(Qubit,IQArray<Qubit>)>>(typeof(E04_SteaneEncode));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E04Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 156, 201)]
    public partial class E05Test : Operation<QVoid, QVoid>, ICallable
    {
        public E05Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E05Test")]
            public void E05Test()
#line 156 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E05Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 156 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E05Test";
        String ICallable.FullName => "MITRE.QSD.L10.E05Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,IQArray<Qubit>)> E04_SteaneEncode__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> E05_SteaneBitSyndrome__
        {
            get;
            set;
        }

        protected ICallable<(Result,Result,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactR
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 157 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                var qubits = Allocate__.Apply(7L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 159 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    foreach (var i in new QRange(1L, 10L))
#line hidden
                    {
#line 160 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        foreach (var brokenIndex in new QRange(-(1L), 6L))
#line hidden
                        {
#line 161 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 162 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            ApplyRotation__.Apply((rotation, qubits[0L]));
#line 164 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            E04_SteaneEncode__.Apply((qubits[0L], qubits.Slice(new QRange(1L, 6L))));
#line 166 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((brokenIndex >= 0L))
                            {
#line 167 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Intrinsic__X.Apply(qubits[brokenIndex]);
                            }

#line 170 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            var syndrome = (IQArray<Result>)E05_SteaneBitSyndrome__.Apply(qubits);
#line 172 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((((brokenIndex + 1L) & 4L) == 4L))
                            {
#line 173 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Diagnostics__EqualityFactR.Apply((syndrome[0L], Result.One, "Bit-flip syndrome measurment 0 is incorrect"));
                            }

#line 179 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((((brokenIndex + 1L) & 2L) == 2L))
                            {
#line 180 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Diagnostics__EqualityFactR.Apply((syndrome[1L], Result.One, "Bit-flip syndrome measurement 1 is incorrect"));
                            }

#line 186 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((((brokenIndex + 1L) & 1L) == 1L))
                            {
#line 187 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Diagnostics__EqualityFactR.Apply((syndrome[2L], Result.One, "Bit-flip syndrome measurement 2 is incorrect"));
                            }

#line 194 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            ResetAll__.Apply(qubits);
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.E04_SteaneEncode__ = this.__Factory__.Get<IAdjointable<(Qubit,IQArray<Qubit>)>>(typeof(E04_SteaneEncode));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.E05_SteaneBitSyndrome__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(E05_SteaneBitSyndrome));
            this.Microsoft__Quantum__Diagnostics__EqualityFactR = this.__Factory__.Get<ICallable<(Result,Result,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactR));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E05Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 201, 246)]
    public partial class E06Test : Operation<QVoid, QVoid>, ICallable
    {
        public E06Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E06Test")]
            public void E06Test()
#line 201 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E06Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 201 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E06Test";
        String ICallable.FullName => "MITRE.QSD.L10.E06Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,IQArray<Qubit>)> E04_SteaneEncode__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, IQArray<Result>> E06_SteanePhaseSyndrome__
        {
            get;
            set;
        }

        protected ICallable<(Result,Result,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactR
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 202 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                var qubits = Allocate__.Apply(7L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 204 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    foreach (var i in new QRange(1L, 10L))
#line hidden
                    {
#line 205 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        foreach (var brokenIndex in new QRange(-(1L), 6L))
#line hidden
                        {
#line 206 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 207 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            ApplyRotation__.Apply((rotation, qubits[0L]));
#line 209 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            E04_SteaneEncode__.Apply((qubits[0L], qubits.Slice(new QRange(1L, 6L))));
#line 211 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((brokenIndex >= 0L))
                            {
#line 212 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Intrinsic__Z.Apply(qubits[brokenIndex]);
                            }

#line 215 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            var syndrome = (IQArray<Result>)E06_SteanePhaseSyndrome__.Apply(qubits);
#line 217 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((((brokenIndex + 1L) & 4L) == 4L))
                            {
#line 218 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Diagnostics__EqualityFactR.Apply((syndrome[0L], Result.One, "Phase-flip syndrome measurment 0 is incorrect"));
                            }

#line 224 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((((brokenIndex + 1L) & 2L) == 2L))
                            {
#line 225 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Diagnostics__EqualityFactR.Apply((syndrome[1L], Result.One, "Phase-flip syndrome measurement 1 is incorrect"));
                            }

#line 231 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            if ((((brokenIndex + 1L) & 1L) == 1L))
                            {
#line 232 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Diagnostics__EqualityFactR.Apply((syndrome[2L], Result.One, "Phase-flip syndrome measurement 2 is incorrect"));
                            }

#line 239 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            ResetAll__.Apply(qubits);
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.E04_SteaneEncode__ = this.__Factory__.Get<IAdjointable<(Qubit,IQArray<Qubit>)>>(typeof(E04_SteaneEncode));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.E06_SteanePhaseSyndrome__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, IQArray<Result>>>(typeof(E06_SteanePhaseSyndrome));
            this.Microsoft__Quantum__Diagnostics__EqualityFactR = this.__Factory__.Get<ICallable<(Result,Result,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactR));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E06Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 246, 263)]
    public partial class E07Test : Operation<QVoid, QVoid>, ICallable
    {
        public E07Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E07Test")]
            public void E07Test()
#line 246 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E07Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 246 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E07Test";
        String ICallable.FullName => "MITRE.QSD.L10.E07Test";
        protected ICallable<(Int64,Int64,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactI
        {
            get;
            set;
        }

        protected ICallable<IQArray<Result>, Int64> E07_SyndromeToIndex__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 247 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            foreach (var brokenIndex in new QRange(-(1L), 6L))
#line hidden
            {
#line 248 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                var syndrome = (IQArray<Result>)new QArray<Result>(((((brokenIndex + 1L) & 4L) == 4L) ? Result.One : Result.Zero), ((((brokenIndex + 1L) & 2L) == 2L) ? Result.One : Result.Zero), ((((brokenIndex + 1L) & 1L) == 1L) ? Result.One : Result.Zero));
#line 253 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                Microsoft__Quantum__Diagnostics__EqualityFactI.Apply((E07_SyndromeToIndex__.Apply(syndrome), brokenIndex, String.Format("Incorrect broken index for syndrome {0}", syndrome)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Diagnostics__EqualityFactI = this.__Factory__.Get<ICallable<(Int64,Int64,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactI));
            this.E07_SyndromeToIndex__ = this.__Factory__.Get<ICallable<IQArray<Result>, Int64>>(typeof(E07_SyndromeToIndex));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E07Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs", OperationFunctor.Body, 263, -1)]
    public partial class E08Test : Operation<QVoid, QVoid>, ICallable
    {
        public E08Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E08Test")]
            public void E08Test()
#line 263 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E08Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 263 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E08Test";
        String ICallable.FullName => "MITRE.QSD.L10.E08Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<QVoid, IQArray<Double>> GenerateRandomRotation__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Double>,Qubit)> ApplyRotation__
        {
            get;
            set;
        }

        protected IAdjointable<(Qubit,IQArray<Qubit>)> E04_SteaneEncode__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> E08_SteaneCorrection__
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 264 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                var qubits = Allocate__.Apply(7L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 266 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                    foreach (var i in new QRange(1L, 10L))
#line hidden
                    {
#line 267 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                        foreach (var bitFlipIndex in new QRange(-(1L), 6L))
#line hidden
                        {
#line 268 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                            foreach (var phaseFlipIndex in new QRange(-(1L), 6L))
#line hidden
                            {
#line 269 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                var rotation = (IQArray<Double>)GenerateRandomRotation__.Apply(QVoid.Instance);
#line 270 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                ApplyRotation__.Apply((rotation, qubits[0L]));
#line 272 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                E04_SteaneEncode__.Apply((qubits[0L], qubits.Slice(new QRange(1L, 6L))));
#line 274 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                if ((bitFlipIndex >= 0L))
                                {
#line 275 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                    Microsoft__Quantum__Intrinsic__X.Apply(qubits[bitFlipIndex]);
                                }

#line 278 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                if ((phaseFlipIndex >= 0L))
                                {
#line 279 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                    Microsoft__Quantum__Intrinsic__Z.Apply(qubits[phaseFlipIndex]);
                                }

#line 282 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                E08_SteaneCorrection__.Apply(qubits);
#line 284 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                E04_SteaneEncode__.Adjoint.Apply((qubits[0L], qubits.Slice(new QRange(1L, 6L))));
#line 285 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                ApplyRotation__.Adjoint.Apply((rotation, qubits[0L]));
#line 287 "/home/ubuntu/varun/do-not-modify/L10/L10Tests.qs"
                                Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(qubits);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(qubits);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.GenerateRandomRotation__ = this.__Factory__.Get<ICallable<QVoid, IQArray<Double>>>(typeof(GenerateRandomRotation));
            this.ApplyRotation__ = this.__Factory__.Get<IUnitary<(IQArray<Double>,Qubit)>>(typeof(ApplyRotation));
            this.E04_SteaneEncode__ = this.__Factory__.Get<IAdjointable<(Qubit,IQArray<Qubit>)>>(typeof(E04_SteaneEncode));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.E08_SteaneCorrection__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(E08_SteaneCorrection));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E08Test, QVoid, QVoid>(QVoid.Instance);
        }
    }
}
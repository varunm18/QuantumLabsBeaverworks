//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L04\",\"Name\":\"E01Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":12,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L04\",\"Name\":\"E01Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs\",\"Position\":{\"Item1\":13,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L04\",\"Name\":\"E02Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":49,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs\",\"Position\":{\"Item1\":50,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L04\",\"Name\":\"E02Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs\",\"Position\":{\"Item1\":50,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L04\",\"Name\":\"E03Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":84,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs\",\"Position\":{\"Item1\":85,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L04\",\"Name\":\"E03Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs\",\"Position\":{\"Item1\":85,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L04\",\"Name\":\"E04Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":107,\"Item2\":4},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs\",\"Position\":{\"Item1\":108,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L04\",\"Name\":\"E04Test\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs\",\"Position\":{\"Item1\":108,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
#line hidden
namespace MITRE.QSD.L04
{
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs", OperationFunctor.Body, 14, 51)]
    public partial class E01Test : Operation<QVoid, QVoid>, ICallable
    {
        public E01Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E01Test")]
            public void E01Test()
#line 14 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E01Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 14 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E01Test";
        String ICallable.FullName => "MITRE.QSD.L04.E01Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Boolean>,Qubit), QVoid> E01_SuperdenseEncode__
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactB
        {
            get;
            set;
        }

        protected ICallable<Result, Boolean> Microsoft__Quantum__Convert__ResultAsBool
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> Microsoft__Quantum__Intrinsic__M
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 15 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            var buffers = (IQArray<IQArray<Boolean>>)new QArray<IQArray<Boolean>>(new QArray<Boolean>(false, false), new QArray<Boolean>(false, true), new QArray<Boolean>(true, false), new QArray<Boolean>(true, true));
#line 22 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            foreach (var i in new QRange(1L, 10L))
#line hidden
            {
#line 23 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                foreach (var buffer in buffers)
#line hidden
                {
#line hidden
                    {
#line 24 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        var qubits = Allocate__.Apply(2L);
#line hidden
                        bool __arg1__ = true;
                        try
                        {
#line 25 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__H.Apply(qubits[0L]);
#line 26 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[0L], qubits[1L]));
#line 28 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            E01_SuperdenseEncode__.Apply((buffer, qubits[0L]));
#line 30 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[0L], qubits[1L]));
#line 31 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__H.Apply(qubits[0L]);
#line 33 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Diagnostics__EqualityFactB.Apply((Microsoft__Quantum__Convert__ResultAsBool.Apply(Microsoft__Quantum__Intrinsic__M.Apply(qubits[0L])), buffer[0L], "First qubit is incorrect."));
#line 38 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Diagnostics__EqualityFactB.Apply((Microsoft__Quantum__Convert__ResultAsBool.Apply(Microsoft__Quantum__Intrinsic__M.Apply(qubits[1L])), buffer[1L], "Second qubit is incorrect."));
#line 44 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            ResetAll__.Apply(qubits);
                        }
#line hidden
                        catch
                        {
                            __arg1__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg1__)
                            {
#line hidden
                                Release__.Apply(qubits);
                            }
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.E01_SuperdenseEncode__ = this.__Factory__.Get<ICallable<(IQArray<Boolean>,Qubit), QVoid>>(typeof(E01_SuperdenseEncode));
            this.Microsoft__Quantum__Diagnostics__EqualityFactB = this.__Factory__.Get<ICallable<(Boolean,Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactB));
            this.Microsoft__Quantum__Convert__ResultAsBool = this.__Factory__.Get<ICallable<Result, Boolean>>(typeof(global::Microsoft.Quantum.Convert.ResultAsBool));
            this.Microsoft__Quantum__Intrinsic__M = this.__Factory__.Get<ICallable<Qubit, Result>>(typeof(global::Microsoft.Quantum.Intrinsic.M));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E01Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs", OperationFunctor.Body, 51, 86)]
    public partial class E02Test : Operation<QVoid, QVoid>, ICallable
    {
        public E02Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E02Test")]
            public void E02Test()
#line 51 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E02Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 51 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E02Test";
        String ICallable.FullName => "MITRE.QSD.L04.E02Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Qubit,Qubit)> Microsoft__Quantum__Intrinsic__CNOT
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__Z
        {
            get;
            set;
        }

        protected ICallable<(Qubit,Qubit), IQArray<Boolean>> E02_SuperdenseDecode__
        {
            get;
            set;
        }

        protected ICallable<(IQArray<Boolean>,IQArray<Boolean>,String), QVoid> Microsoft__Quantum__Diagnostics__AllEqualityFactB
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 52 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            var buffers = (IQArray<IQArray<Boolean>>)new QArray<IQArray<Boolean>>(new QArray<Boolean>(false, false), new QArray<Boolean>(false, true), new QArray<Boolean>(true, false), new QArray<Boolean>(true, true));
#line 59 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            foreach (var i in new QRange(1L, 10L))
#line hidden
            {
#line 60 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                foreach (var buffer in buffers)
#line hidden
                {
#line hidden
                    {
#line 61 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        var qubits = Allocate__.Apply(2L);
#line hidden
                        bool __arg1__ = true;
                        try
                        {
#line 62 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__H.Apply(qubits[0L]);
#line 63 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__CNOT.Apply((qubits[0L], qubits[1L]));
#line 64 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            if (buffer[1L])
                            {
#line 65 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                                Microsoft__Quantum__Intrinsic__X.Apply(qubits[0L]);
                            }

#line 67 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            if (buffer[0L])
                            {
#line 68 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                                Microsoft__Quantum__Intrinsic__Z.Apply(qubits[0L]);
                            }

#line 71 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            var result = (IQArray<Boolean>)E02_SuperdenseDecode__.Apply((qubits[0L], qubits[1L]));
#line 73 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Diagnostics__AllEqualityFactB.Apply((result, buffer, "Decoded value is incorrect."));
#line 79 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            ResetAll__.Apply(qubits);
                        }
#line hidden
                        catch
                        {
                            __arg1__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg1__)
                            {
#line hidden
                                Release__.Apply(qubits);
                            }
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__CNOT = this.__Factory__.Get<IUnitary<(Qubit,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.CNOT));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__Z = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.Z));
            this.E02_SuperdenseDecode__ = this.__Factory__.Get<ICallable<(Qubit,Qubit), IQArray<Boolean>>>(typeof(E02_SuperdenseDecode));
            this.Microsoft__Quantum__Diagnostics__AllEqualityFactB = this.__Factory__.Get<ICallable<(IQArray<Boolean>,IQArray<Boolean>,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.AllEqualityFactB));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E02Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs", OperationFunctor.Body, 86, 109)]
    public partial class E03Test : Operation<QVoid, QVoid>, ICallable
    {
        public E03Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E03Test")]
            public void E03Test()
#line 86 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E03Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 86 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E03Test";
        String ICallable.FullName => "MITRE.QSD.L04.E03Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean,Boolean,Qubit), Boolean> E03_BB84PartyA__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactB
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Diagnostics__AssertAllZero
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 87 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            foreach (var i in new QRange(0L, 7L))
#line hidden
            {
#line 88 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                var aPublic = ((i / 4L) == 1L);
#line 89 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                var aSecret = (((i / 2L) % 2L) == 1L);
#line 90 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                var bPublic = ((i % 2L) == 1L);
#line hidden
                {
#line 91 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                    var qubit = Allocate__.Apply();
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 92 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        var result = E03_BB84PartyA__.Apply((aPublic, aSecret, bPublic, qubit));
#line 94 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        if (aPublic)
                        {
#line 94 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__H.Apply(qubit);
                        }

#line 95 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        if (aSecret)
                        {
#line 95 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(qubit);
                        }

#line 97 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        Microsoft__Quantum__Diagnostics__EqualityFactB.Apply((result, (aPublic == bPublic), "Keep/reject value is incorrect."));
#line 103 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        Microsoft__Quantum__Diagnostics__AssertAllZero.Apply(new QArray<Qubit>(qubit));
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(qubit);
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.E03_BB84PartyA__ = this.__Factory__.Get<ICallable<(Boolean,Boolean,Boolean,Qubit), Boolean>>(typeof(E03_BB84PartyA));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Diagnostics__EqualityFactB = this.__Factory__.Get<ICallable<(Boolean,Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactB));
            this.Microsoft__Quantum__Diagnostics__AssertAllZero = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertAllZero));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E03Test, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs", OperationFunctor.Body, 109, -1)]
    public partial class E04Test : Operation<QVoid, QVoid>, ICallable
    {
        public E04Test(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "E04Test")]
            public void E04Test()
#line 109 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<E04Test, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 109 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "E04Test";
        String ICallable.FullName => "MITRE.QSD.L04.E04Test";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean,Qubit), (Boolean,Boolean)> E04_BB84PartyB__
        {
            get;
            set;
        }

        protected ICallable<(Boolean,Boolean,String), QVoid> Microsoft__Quantum__Diagnostics__EqualityFactB
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 110 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
            foreach (var i in new QRange(0L, 7L))
#line hidden
            {
#line 111 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                var aPublic = ((i / 4L) == 1L);
#line 112 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                var aSecret = (((i / 2L) % 2L) == 1L);
#line 113 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                var bPublic = ((i % 2L) == 1L);
#line hidden
                {
#line 114 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                    var qubit = Allocate__.Apply();
#line hidden
                    bool __arg1__ = true;
                    try
                    {
#line 115 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        if (aSecret)
                        {
#line 115 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(qubit);
                        }

#line 116 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        if (aPublic)
                        {
#line 116 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Intrinsic__H.Apply(qubit);
                        }

#line 118 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        var (bSecret,keep) = E04_BB84PartyB__.Apply((aPublic, bPublic, qubit));
#line 120 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        Microsoft__Quantum__Diagnostics__EqualityFactB.Apply((keep, (aPublic == bPublic), "Keep/reject value is incorrect."));
#line 126 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        if (keep)
                        {
#line 127 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                            Microsoft__Quantum__Diagnostics__EqualityFactB.Apply((aSecret, bSecret, "Secret bits do not match."));
                        }

#line 134 "/home/ubuntu/varun/do-not-modify/L04/L04Tests.qs"
                        Reset__.Apply(qubit);
                    }
#line hidden
                    catch
                    {
                        __arg1__ = false;
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__)
                        {
#line hidden
                            Release__.Apply(qubit);
                        }
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.E04_BB84PartyB__ = this.__Factory__.Get<ICallable<(Boolean,Boolean,Qubit), (Boolean,Boolean)>>(typeof(E04_BB84PartyB));
            this.Microsoft__Quantum__Diagnostics__EqualityFactB = this.__Factory__.Get<ICallable<(Boolean,Boolean,String), QVoid>>(typeof(global::Microsoft.Quantum.Diagnostics.EqualityFactB));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<E04Test, QVoid, QVoid>(QVoid.Instance);
        }
    }
}
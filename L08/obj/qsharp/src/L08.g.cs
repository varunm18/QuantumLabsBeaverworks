//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L08\",\"Name\":\"E01_QFT\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L08/L08.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":31},\"Item2\":{\"Line\":1,\"Column\":40}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Null\"}}]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you must implement the quantum Fourier transform\",\" circuit. The operation should be performed in-place, meaning the\",\" time-domain output should be in the same order as the frequency-domain\",\" input, not reversed.\",\"\",\" # Input\",\" ## register\",\" A qubit register with unknown length in an unknown state. It is of type\",\" Microsoft.Quantum.Arithmetic.BigEndian, which can be used with some\",\" arithmetic library operations. Use the unwrap operator (!) to access\",\" the underlying array. For example, to address the first qubit in the\",\" register, use `register![0]`. For more info, see:\",\" https://learn.microsoft.com/en-us/azure/quantum/user-guide/language/expressions/itemaccessexpressions#item-access-for-user-defined-types\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L08\",\"Name\":\"E01_QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L08/L08.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":18}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L08\",\"Name\":\"E01_QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L08/L08.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":61}},\"Documentation\":[\"automatically generated QsAdjoint specialization for MITRE.QSD.L08.E01_QFT\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L08\",\"Name\":\"E01_QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L08/L08.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":61}},\"Documentation\":[\"automatically generated QsControlled specialization for MITRE.QSD.L08.E01_QFT\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L08\",\"Name\":\"E01_QFT\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L08/L08.qs\",\"Position\":{\"Item1\":28,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":52},\"Item2\":{\"Line\":1,\"Column\":61}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for MITRE.QSD.L08.E01_QFT\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"MITRE.QSD.L08\",\"Name\":\"E02_GetFreqOfSineWave\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L08/L08.qs\",\"Position\":{\"Item1\":76,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":2,\"Column\":20},\"Item2\":{\"Line\":2,\"Column\":29}}]}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":17}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"sampleRate\"]},\"Type\":{\"Case\":\"Double\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":19}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"UserDefinedType\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Arithmetic\",\"Name\":\"BigEndian\",\"Range\":{\"Case\":\"Null\"}}]},{\"Case\":\"Double\"}]]},\"ReturnType\":{\"Case\":\"Double\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given a quantum register with a single sine\",\" wave encoded into the amplitudes of each term in the superposition.\",\"\",\" For example: the first sample of the wave will be the amplitude of the\",\" |0> term, the second sample of the wave will be the amplitude of the\",\" |1> term, the third will be the amplitude of the |2> term, and so on.\",\"\",\" Your goal is to find the frequency of these samples, and return that\",\" frequency.\",\"\",\" # Input\",\" ## register\",\" The register which contains the samples of the sine wave in the\",\" amplitudes of its terms.\",\"\",\" ## sampleRate\",\" The number of samples per second that were used to collect the\",\" original samples. You will need this to retrieve the correct\",\" frequency.\",\"\",\" # Output\",\" The frequency of the sine wave.\",\"\",\" # Remarks\",\" When using the DFT to analyze the frequency components of a purely real\",\" signal, typically the second half of the output is thrown away, since\",\" these represent frequencies too fast to show up in the time domain.\",\" Here, we can't just \\\"throw away\\\" a part of the output, so if we measure\",\" a value above N/2, it will need to be mirrored about N/2 to recover the\",\" actual frequency of the input sine wave. For more info, see:\",\" https://en.wikipedia.org/wiki/Nyquist_frequency\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"MITRE.QSD.L08\",\"Name\":\"E02_GetFreqOfSineWave\"},\"Attributes\":[],\"SourceFile\":\"/home/ubuntu/varun/do-not-modify/L08/L08.qs\",\"Position\":{\"Item1\":76,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":32}},\"Documentation\":[]}")]
#line hidden
namespace MITRE.QSD.L08
{
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L08/L08.qs", OperationFunctor.Body, 29, 77)]
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L08/L08.qs", OperationFunctor.Adjoint, 29, 77)]
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L08/L08.qs", OperationFunctor.Controlled, 29, 77)]
    [SourceLocation("/home/ubuntu/varun/do-not-modify/L08/L08.qs", OperationFunctor.ControlledAdjoint, 29, 77)]
    public partial class E01_QFT : Unitary<Microsoft.Quantum.Arithmetic.BigEndian>, ICallable
    {
        public E01_QFT(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "E01_QFT";
        String ICallable.FullName => "MITRE.QSD.L08.E01_QFT";
        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Qubit)> Microsoft__Quantum__Intrinsic__R1Frac
        {
            get;
            set;
        }

        protected IUnitary<IQArray<Qubit>> Microsoft__Quantum__Canon__SwapReverseRegister
        {
            get;
            set;
        }

        protected ICallable<QRange, QRange> RangeReverse__
        {
            get;
            set;
        }

        public override Func<Microsoft.Quantum.Arithmetic.BigEndian, QVoid> __Body__ => (__in__) =>
        {
            var register = __in__;
#line 34 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            foreach (var i in new QRange(0L, (register.Data.Length - 1L)))
#line hidden
            {
#line 35 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                Microsoft__Quantum__Intrinsic__H.Apply(register.Data[i]);
#line 36 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                foreach (var j in new QRange(1L, ((register.Data.Length - 1L) - i)))
#line hidden
                {
#line 37 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Apply((new QArray<Qubit>(register.Data[(i + j)]), (2L, (j + 1L), register.Data[i])));
                }
            }

#line 41 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            Microsoft__Quantum__Canon__SwapReverseRegister.Apply(register.Data);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<Microsoft.Quantum.Arithmetic.BigEndian, QVoid> __AdjointBody__ => (__in__) =>
        {
            var register = __in__;
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            Microsoft__Quantum__Canon__SwapReverseRegister.Adjoint.Apply(register.Data);
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange(0L, (register.Data.Length - 1L))))
#line hidden
            {
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                foreach (var __qsVar1__j__ in RangeReverse__.Apply(new QRange(1L, ((register.Data.Length - 1L) - __qsVar0__i__))))
#line hidden
                {
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Adjoint.Apply((new QArray<Qubit>(register.Data[(__qsVar0__i__ + __qsVar1__j__)]), (2L, (__qsVar1__j__ + 1L), register.Data[__qsVar0__i__])));
                }

#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(register.Data[__qsVar0__i__]);
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            foreach (var i in new QRange(0L, (register.Data.Length - 1L)))
#line hidden
            {
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                Microsoft__Quantum__Intrinsic__H.Controlled.Apply((__controlQubits__, register.Data[i]));
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                foreach (var j in new QRange(1L, ((register.Data.Length - 1L) - i)))
#line hidden
                {
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(register.Data[(i + j)]), (2L, (j + 1L), register.Data[i]))));
                }
            }

#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            Microsoft__Quantum__Canon__SwapReverseRegister.Controlled.Apply((__controlQubits__, register.Data));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Microsoft.Quantum.Arithmetic.BigEndian), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,register) = __in__;
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            Microsoft__Quantum__Canon__SwapReverseRegister.Adjoint.Controlled.Apply((__controlQubits__, register.Data));
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            foreach (var __qsVar0__i__ in RangeReverse__.Apply(new QRange(0L, (register.Data.Length - 1L))))
#line hidden
            {
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                foreach (var __qsVar1__j__ in RangeReverse__.Apply(new QRange(1L, ((register.Data.Length - 1L) - __qsVar0__i__))))
#line hidden
                {
#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                    Microsoft__Quantum__Intrinsic__R1Frac.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(register.Data[(__qsVar0__i__ + __qsVar1__j__)]), (2L, (__qsVar1__j__ + 1L), register.Data[__qsVar0__i__]))));
                }

#line 29 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                Microsoft__Quantum__Intrinsic__H.Adjoint.Controlled.Apply((__controlQubits__, register.Data[__qsVar0__i__]));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Intrinsic__R1Frac = this.__Factory__.Get<IUnitary<(Int64,Int64,Qubit)>>(typeof(global::Microsoft.Quantum.Intrinsic.R1Frac));
            this.Microsoft__Quantum__Canon__SwapReverseRegister = this.__Factory__.Get<IUnitary<IQArray<Qubit>>>(typeof(global::Microsoft.Quantum.Canon.SwapReverseRegister));
            this.RangeReverse__ = this.__Factory__.Get<ICallable<QRange, QRange>>(typeof(global::Microsoft.Quantum.Core.RangeReverse));
        }

        public override IApplyData __DataIn__(Microsoft.Quantum.Arithmetic.BigEndian data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.BigEndian register)
        {
            return __m__.Run<E01_QFT, Microsoft.Quantum.Arithmetic.BigEndian, QVoid>(register);
        }
    }

    [SourceLocation("/home/ubuntu/varun/do-not-modify/L08/L08.qs", OperationFunctor.Body, 77, -1)]
    public partial class E02_GetFreqOfSineWave : Operation<(Microsoft.Quantum.Arithmetic.BigEndian,Double), Double>, ICallable
    {
        public E02_GetFreqOfSineWave(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Microsoft.Quantum.Arithmetic.BigEndian,Double)>, IApplyData
        {
            public In((Microsoft.Quantum.Arithmetic.BigEndian,Double) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return ((IApplyData)Data.Item1?.Data)?.Qubits;
                }
            }
        }

        String ICallable.Name => "E02_GetFreqOfSineWave";
        String ICallable.FullName => "MITRE.QSD.L08.E02_GetFreqOfSineWave";
        protected IUnitary<Microsoft.Quantum.Arithmetic.BigEndian> E01_QFT__
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.BigEndian, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__BigEndianAsLittleEndian
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        public override Func<(Microsoft.Quantum.Arithmetic.BigEndian,Double), Double> __Body__ => (__in__) =>
        {
            var (register,sampleRate) = __in__;
#line 81 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            E01_QFT__.Apply(register);
#line 82 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            var measuredFrequency = Microsoft__Quantum__Convert__IntAsDouble.Apply(Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(Microsoft__Quantum__Arithmetic__BigEndianAsLittleEndian.Apply(register)));
#line 83 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            var N = Microsoft__Quantum__Convert__IntAsDouble.Apply(2L.Pow(register.Data.Length));
#line 84 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            E01_QFT__.Adjoint.Apply(register);
#line 86 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            if ((measuredFrequency > (N / 2D)))
            {
#line 87 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
                return ((N - measuredFrequency) / (N / sampleRate));
            }

#line 89 "/home/ubuntu/varun/do-not-modify/L08/L08.qs"
            return (measuredFrequency / (N / sampleRate));
        }

        ;
        public override void __Init__()
        {
            this.E01_QFT__ = this.__Factory__.Get<IUnitary<Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(E01_QFT));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__BigEndianAsLittleEndian = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.BigEndian, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
        }

        public override IApplyData __DataIn__((Microsoft.Quantum.Arithmetic.BigEndian,Double) data) => new In(data);
        public override IApplyData __DataOut__(Double data) => new QTuple<Double>(data);
        public static System.Threading.Tasks.Task<Double> Run(IOperationFactory __m__, Microsoft.Quantum.Arithmetic.BigEndian register, Double sampleRate)
        {
            return __m__.Run<E02_GetFreqOfSineWave, (Microsoft.Quantum.Arithmetic.BigEndian,Double), Double>((register, sampleRate));
        }
    }
}